/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/

class Solution {
public:
    Node* solve(vector<vector<int>>& g, int r1, int r2, int c1, int c2) {
        if (r1 == r2-1) {
            return new Node(g[r1][c1], true);
        }
        Node* tl = solve(g, r1, (r1+r2)/2, c1, (c1+c2)/2);
        Node* tr = solve(g, r1, (r1+r2)/2, (c1+c2)/2, c2);
        Node* bl = solve(g, (r1+r2)/2, r2, c1, (c1+c2)/2);
        Node* br = solve(g, (r1+r2)/2, r2, (c1+c2)/2, c2);
       if (tl->isLeaf && tr->isLeaf && bl->isLeaf && br->isLeaf && tl->val==tr->val && bl->val==br->val && tl->val==bl->val) {
            return new Node(g[r1][c1], true);
        }
        return new Node(false, false, tl, tr, bl, br);
    }
    Node* construct(vector<vector<int>>& grid) {
        return solve(grid, 0, grid.size(), 0, grid.size());
    }
};
