class Solution {
public:
    void dfs(vector<vector<int>> &matrix, int row, int col, int prev, vector<vector<int>> &oceans) {
        if(row<0 || row>=matrix.size() || col<0 || col>=matrix[0].size()) {return;}
        if(matrix[row][col]<prev) {return;}
        if(oceans[row][col]==-1) {return;}
        oceans[row][col]=-1;
        dfs(matrix, row+1, col, matrix[row][col], oceans);
        dfs(matrix, row-1, col, matrix[row][col], oceans);
        dfs(matrix, row, col+1, matrix[row][col], oceans);
        dfs(matrix, row, col-1, matrix[row][col], oceans);
    }    
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        vector<vector<int>> ans;
        if(heights.size()==0) {return ans;}
        vector<vector<int>> pacific(heights.size(), vector<int>(heights[0].size(), 0));
        vector<vector<int>> atlantic(heights.size(), vector<int>(heights[0].size(), 0));
        for(int i=0;i<heights[0].size();i++) {
            dfs(heights, 0, i, INT_MIN, pacific);
            dfs(heights, heights.size()-1, i, INT_MIN, atlantic);
        }
        for(int i=0;i<heights.size();i++) {
            dfs(heights, i, 0, INT_MIN, pacific);
            dfs(heights, i, heights[0].size()-1, INT_MIN, atlantic);
        }
        vector<int> v;
        for(int i=0;i<heights.size();i++) {
            for(int j=0;j<heights[0].size();j++) {
                if(pacific[i][j]==-1 and pacific[i][j]==atlantic[i][j]) {
                    v.clear();
                    v.push_back(i);
                    v.push_back(j);
                    ans.push_back(v);
                }
            }
        }
        return ans;
    }
};
