// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
    bool dfs(vector<vector<char>>& board, string word, int i, int j, int pos) {
        if(i<0 || j<0 || i>=board.size() || j>=board[0].size()) {return 0;}
        if(pos==word.length()) return 1;
        if(word[pos]==board[i][j]) {
            char temp=board[i][j];
            board[i][j]='!';
            bool a=dfs(board, word, i+1, j, pos+1);
            bool b=dfs(board, word, i, j+1, pos+1);
            bool c=dfs(board, word, i-1, j, pos+1);
            bool d=dfs(board, word, i, j-1, pos+1);
            board[i][j]=temp;
            return a||b||c||d;
        }
        else {return false;}
        
    }
    
    bool isWordExist(vector<vector<char>>& board, string word) {
        for(int i=0;i<board.size();i++) {
            for(int j=0;j<board[0].size();j++) {
                if(board[i][j]==word[0]) {
                    if(dfs(board, word, i, j, 0)) {return 1;}
                }
            }
        }
        return 0;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<char>>board(n, vector<char>(m, '*'));
		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++)
				cin >> board[i][j];
		string word;
		cin >> word;
		Solution obj;
		bool ans = obj.isWordExist(board, word);
		if(ans)
			cout << "1\n";
		else cout << "0\n";
	}
	return 0;
}  // } Driver Code Ends
