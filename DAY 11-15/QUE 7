// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
    public:
    int dfs(int i, int j, vector<vector<int>>& grid) {
        int r=grid.size(), c=grid[0].size();
        if(i<0 || j<0 || i>=r || j>=c || grid[i][j]!=1) {return 0;}
        grid[i][j]=2;
        return (1 + dfs(i, j+1, grid) + dfs(i+1, j, grid) + dfs(i-1, j, grid) + dfs(i, j-1, grid) + dfs(i+1, j+1, grid) + dfs(i-1, j-1, grid) + dfs(i+1, j-1, grid) + dfs(i-1, j+1, grid));
    }
        
    int findMaxArea(vector<vector<int>>& grid) {
        int ans=0;
        for(int i=0;i<grid.size();i++) {
            for(int j=0;j<grid[0].size();j++) {
                if(grid[i][j]==1) {
                    ans=max(ans, dfs(i, j, grid));
                }
            }
        }
        return ans;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>grid(n, vector<int>(m, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		int ans = obj.findMaxArea(grid);
		cout << ans << "\n";
	}
	return 0;
}  // } Driver Code Ends
