class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        double ans=0;
        vector<vector<pair<int, double>>> adj(n);
        for(int i=0;i<edges.size();i++) {
                adj[edges[i][0]].push_back({edges[i][1], succProb[i]});
                adj[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        vector<double>prob(n);
        prob[start]=1;
        queue<int>q;
        q.push(start);
        
        while (!q.empty()) {
            int curr=q.front();
            q.pop();
            for (auto i: adj[curr]) {
                cout<<prob[i.first]<<" ";
                if (prob[i.first]>=prob[curr]*i.second) {continue;}
                prob[i.first]=prob[curr]*i.second;
                q.push(i.first);
            }
        }
        return prob[end];
    }
};
